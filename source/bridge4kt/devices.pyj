class pDevice():

    def __init__(self, id):
        self._id = id
        self.vDevices = {}

    @property
    def id(self) -> Number:
        return self._id

    @staticmethod
    def hex_pad_left(number: Number, digits: Number) -> String:
        if not digits?:
            digits = 2
        # assert((digits < 11))
        hex = number.toString(16)

        return ("0000000000" + hex).slice(- digits)

    @property
    def manufacturerID(self) -> String:
        zway = v'global["zway"]'
        mI = pDevice.hex_pad_left(zway.devices[self._id].data.manufacturerId.value, 4)
        mPT = pDevice.hex_pad_left(zway.devices[self._id].data.manufacturerProductType.value, 4)
        mPI = pDevice.hex_pad_left(zway.devices[self._id].data.manufacturerProductId.value, 4)
        return mI + '.' + mPT + '.' + mPI

    @property
    def genericID(self) -> String:
        zway = v'global["zway"]'
        bt = pDevice.hex_pad_left(zway.devices[self._id].data.basicType.value, 2)
        gt = pDevice.hex_pad_left(zway.devices[self._id].data.genericType.value, 2)
        st = pDevice.hex_pad_left(zway.devices[self._id].data.specificType.value, 2)
        return bt + '.' + gt + '.' + st

    @property
    def hashedFingerprint(self):

        def hashFnv32a(str, asString, seed):

            # mar10 @ https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript/7616484#7616484
            # ---
            # Calculate a 32 bit FNV-1a hash
            # Found here: https://gist.github.com/vaiorabbit/5657561
            # Ref.: http://isthe.com/chongo/tech/comp/fnv/
            # @param {string} str the input value
            # @param {boolean} [asString=false] set to true to return the hash value as 8-digit hex string instead of an integer
            # @param {integer} [seed] optionally pass the hash of the previous chunk
            # @returns {integer | string}

            hval = seed ? 0x811c9dc5

            for char in str:
                hval ^= char.charCodeAt()
                hval += (hval << 1) + (hval << 4) + (hval << 7) + (hval << 8) + (hval << 24)

            if asString is True:
                # Convert to 8 digit hex string
                return ("0000000" + (hval >>> 0).toString(16)).substr(-8)

            return hval >>> 0


        if not self.vDevices? or len(self.vDevices) < 1:
            return None

        fp = []

        for f in self.vDevices:
            fp.push(self.vDevices[f].fingerprint)

        if len(fp) < 1:
            return None

        # to get a predictable order
        fp.sort(def(a, b):

            if len(a) <= len(b):
                i1 = a
                i2 = b
            else:
                i1 = b
                i2 = a

            for index in range(len(a)):
                t1 = i1[index]
                t2 = i2[index]

                if t1 is NaN:
                    if t2 is NaN:
                        if t1 < t2:
                            return -1
                        elif t1 > t2:
                            return 1
                        else:
                            return 0
                    else:
                        # we consider a number being smaller than any literal
                        return 1
                else:
                    if t2 is NaN:
                        return -1
                    else:
                        return t1 - t2

            # if there's no order found until yet, the shorter length is considered smaller
            if len(a) == len(b):
                return 0

            return -1 if len(a) < len(b) else 1

        )

        # hash the devices
        return hashFnv32a(fp.join(','), True)

    def commandClass(self, cmdClass, instance):

        zway = v'global["zway"]'

        if instance?:
            i = zway.devices[self._id].instances[instance]
            if i?:
                c = i.commandClasses[cmdClass]
                if c?:
                    return c
        else:
            ii = zway.devices[self._id].instances
            for index in ii:
                i = ii[index]
                c = i.commandClasses[cmdClass]
                if c?:
                    return c

        return None

    def supportedCommandClass(self, cmdClass, instance):

        zway = v'global["zway"]'

        c = None
        if instance?:
            i = zway.devices[self._id].instances[instance]
            if i?:
                c = i.commandClasses[cmdClass]
        else:
            ii = zway.devices[self._id].instances
            for index in ii:
                i = ii[index]
                c = i.commandClasses[cmdClass]
                if c?:
                    break

        try:
            # this will raise as well in case of c == None
            supported = c.data.supported.value
        except:
            supported = False

        return c if supported is True else None

    @property
    def data(self):
        zway = v'global["zway"]'

        d = zway.devices[self._id]
        if d?:
            data = d.data
            if data?:
                return data

        return None


class vDevice():

    def __init__(self, vDev):

        self._vDev = vDev
        self._id = None
        self._instance = None
        self._commandClass = None

    @property
    def parentID(self) -> Number:
        return self._id

    @property
    def id(self) -> String:
        return self._vDev.id

    @property
    def instance(self) -> Number:
        return self._instance

    @property
    def zway(self) -> Object:
        return self._vDev


class ZWayVDev(vDevice):

    def __init__(self, vDev: Object):

        vDevice.prototype.__init__.call(self, vDev)

        # Extract from the vDev.id the information about the true device, the current instance & the commandClass & ...
        # Capture format: ZWayVDev_zway_11-0-49-5-A, the last two optional
        # This returns an Array: [match, group#1, group#2, group#3] or None
        check = v'/(?:ZWayVDev_zway_)(\d+)-(\d+)-(\d+)(?:-(\d+|.?))?(?:-([^\d]+))?/'.exec(vDev.id)

        if check? and len(check) > 3:

            self._id = check[1]
            self._instance = check[2]
            self._commandClass = check[3]

            if check[4]?:
                self._sensorType = check[4]

            if check[5]?:
                self._subType = check[5]

    @property
    def commandClass(self) -> Object:

        zway = v'global["zway"]'

        if self._commandClass?:
            return zway.devices[self._id].instances[self._instance].commandClasses[self._commandClass]

        return None

    @property
    def commandClassID(self) -> Number:
        return self._commandClass

    @property
    def sensorTypeID(self) -> Number:
        if self._sensorType?:
            return self._sensorType
        return None

    @property
    def subTypeID(self) -> String:
        if self._subType?:
            return self._subType
        return None

    @property
    def commandClassBasic(self) -> Object:
        zway = v'global["zway"]'

        return zway.devices[self._id].instances[self._instance].commandClasses[0x20]    # Basic


    @property
    def fingerprint(self) -> Array:

        # the expected format is like 'ZWayVDev_zway_2-0-50-...-...'
        splits = str.split(self._vDev.id, '_')
        if (len(splits) < 3
            or splits[0] != 'ZWayVDev'
            or splits[1] != 'zway'):
            return

        # ... then it's like 2-0-50-...
        # @0 = device id
        # @1 = instance
        # @2 = commandClass
        # @... = commandClass modes (if applicable)

        # NB: Each element is converted to a number...
        # NB2: ... if applicable: There're literal modes (e.g. 'A') as well!

        elements = str.split(splits[2], '-').map(def(item):
            v = parseInt(item)
            return item if isNaN(v) else v
        )

        # there's always at least id-instance-commandClass'
        if len(elements) < 3:
            return None

        # The device id (index 0) depends on the sequence of inclusion for the current home installation.
        # Everything else is common, but dependent on the ZWay detection algorithm...
        elements.shift()

        return elements

    @property
    def tags(self) -> [String]:

        list = []

        tgs = self._vDev.get("tags")

        if tgs? and len(tgs) > 0:
            for tag in tgs:
                t = str.split(tag, ":")
                if (len(t) > 1 and
                        t[0] == "B4KT"):
                    t.shift()
                    list.push(t.join(":"))

        return list if len(list) > 0 else []


def create(vDev: Object) -> vDevice:

    id = vDev.id
    if id.substring(0, 8) == "ZWayVDev":

        # Usually a valid zway id looks like 'ZWayVDev_zway_2-0-38'.
        # There's yet a similar 'ZWayVDev_zway_Remote_5-0-0-1-S' for remote controls - that we have to exclude

        splits = str.split(id, "_")
        if len(splits) == 3 and splits[1] == "zway":
            return ZWayVDev(vDev)

    return None

def detect_vDev(controller, pID, detectType):

    if not (controller? and pID? and detectType?):
        return None

    vDev = None

    for testType in detectType:

        definition = detectType[testType]

        if _.isArray(definition) is False:
            definition = [definition]

        for d in definition:

            vDevList = controller.devices.filter(def(x):
                # console.log(x.get(testType) + " / " + d)
                return x.get(testType) == d
            )

            vDevList = vDevList.filter(def(x):
                dev = create(x)
                if dev? and dev.parentID == pID:
                    return True
                return False
            )

            if len(vDevList) > 0:
                vDev = vDevList[0]
                # type = t
                break

        if vDev?:
            break

    # console.logJS(vDev)

    if vDev?:
        # return { "vDev": vDev, "type": type }
        return vDev

    return None
