from characteristics.base import Base, out

class Brightness(Base):

    def add_to_callback(self):

        c = None
        self.name = "Brightness"
        self.detectType = { "deviceType": "switchMultilevel" }
        d = self.perform_vDev_detection(self.detectType)

        if d?:
            self.vDev = d

            c = self.service.addCharacteristic(
                HomeKit.Characteristics.Brightness
                , "int"
                , {
                    'get': def():
                        if self.target is None:
                            return self.map_zway_to_hk(self.vDev.get("metrics:level"))

                        return self.target

                    , 'set': def(value):
                        self.target = value
                        self.reset_target()

                        v = self.map_hk_to_zway(value)
                        self.vDev.performCommand('exact', {"level": v})
                }
            )

            self.vDev.on("change:metrics:level", self.onLevelChange)

        return c

    def remove(self):
        if _.isObject(self.vDev):
            self.vDev.off("change:metrics:level", self.onLevelChange)
        Base.remove(self)


class Name(Base):

    def add_to_callback(self):

        self.name = "Name"

        c = None
        d = None
        self.vDev = None

        detectTypeList = []

        # self.endPoint is set by service "Switch"
        if self.endPoint?:
            console.log(".. HK Characteristic '" + self.name + "' @ endPoint == " + self.endPoint)
            detectTypeList.push("B4KT:Name:" + self.endPoint);

        detectTypeList.push("B4KT:Name")

        self.detectType = { "tags": detectTypeList }
        d = self.perform_vDev_detection(self.detectType)

        if d?:
            self.vDev = d

        c = self.service.addCharacteristic(
            HomeKit.Characteristics.Name
            , "string"
            , {
                'get': def():
                    name = None
                    if self.vDev? and self.vDev != -1:
                        console.log("Name with vDev")
                        name = self.vDev.get("metrics:title").toString()
                    else:
                        dev = self.zway.devices[self.id]
                        if dev?:
                            name = dev.data.givenName.value.toString()
                    return name if name? else "Unnamed device"
            }
        )

        return c


class On(Base):

    def add_to_callback(self):

        self.name = "On"
        c = None

        # For Switches with more than 1 physical switching unit, 'endPoint' is defined by the "Switch" service.
        # If 'On' is added to non-Switch services, the default vDev detection by deviceType is used.

        d = None
        if self.endPoint?:
            console.log(".. HK Characteristic '" + self.name + "' @ endPoint == " + self.endPoint)
            self.detectType = { "tags": "B4KT:Switch:" + self.endPoint, "deviceType": "switchBinary:" + self.endPoint}
        else:
            self.detectType = { "deviceType": "switchBinary"}

        d = self.perform_vDev_detection(self.detectType)

        if d?:

            self.vDev = d

            c = self.service.addCharacteristic(
                HomeKit.Characteristics.On
                , "bool"
                , {
                    'get': def():
                        level = self.vDev.get("metrics:level")
                        if level in ["on", 99, 0xFF, True]:
                            return True

                        return False

                    , 'set': def(value):

                        if (value == True) or (value == 1):
                            v = "on"
                        else:
                            v = "off"

                        self.vDev.performCommand(v)
                }
            )

            self.vDev.on("change:metrics:level", self.onLevelChange)

        return c

    def remove(self):
        if _.isObject(self.vDev):
            self.vDev.off("change:metrics:level", self.onLevelChange)
        Base.remove(self)
