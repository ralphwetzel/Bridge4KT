from characteristics.base import Base, out

class Brightness(Base):

    def add_to_callback(self):

        c = None
        self.name = "Brightness"
        self.detectType = { "deviceType": "switchMultilevel" }
        d = self.perform_vDev_detection(self.detectType)

        if d?:
            self.vDev = d

            c = self.service.addCharacteristic(
                HomeKit.Characteristics.Brightness
                , "int"
                , {
                    'get': def():
                        if self.target is None:
                            return self.map_zway_to_hk(self.vDev.get("metrics:level"))

                        return self.target

                    , 'set': def(value):
                        self.target = value
                        self.reset_target()

                        v = self.map_hk_to_zway(value)
                        self.vDev.performCommand('exact', {"level": v})
                }
            )

            self.vDev.on("change:metrics:level", self.onLevelChange)

        return c

    def remove(self):
        if _.isObject(self.vDev):
            self.vDev.off("change:metrics:level", self.onLevelChange)
        Base.remove(self)


class Name(Base):

    def add_to_callback(self):

        self.name = "Name"

        c = None
        self.vDev = -1

        c = self.service.addCharacteristic(
            HomeKit.Characteristics.Name
            , "string"
            , {
                'get': def():
                    name = None
                    dev = self.zway.devices[self.id]
                    if dev?:
                        name = dev.data.givenName.value.toString()
                    return name if name? else "Unnamed device"
            }
        )

        return c


class On(Base):

    def add_to_callback(self):

        self.name = "On"

        c = None
        self.detectType = { "deviceType": "switchBinary" }
        d = self.perform_vDev_detection(self.detectType)

        if d?:

            self.vDev = d

            c = self.service.addCharacteristic(
                HomeKit.Characteristics.On
                , "bool"
                , {
                    'get': def():
                        return self.vDev.get("metrics:level")
                        if level == 'on':
                            return True
                        if level == 99:
                            return True

                        return False

                    , 'set': def(value):

                        if (value == True) or (value == 1):
                            v = 'on'
                        else:
                            v = 'off'

                        self.vDev.performCommand(v)
                }
            )

            self.vDev.on("change:metrics:level", self.onLevelChange)

        return c

    def remove(self):
        if _.isObject(self.vDev):
            self.vDev.off("change:metrics:level", self.onLevelChange)
        Base.remove(self)
